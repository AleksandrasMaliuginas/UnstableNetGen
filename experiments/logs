18:49:02 INFO - logger_setup: /home/aauconnectivity/HIFIC/high-fidelity-generative-compression/src/model.py
18:49:02 INFO - <module>: Using device cpu
18:49:03 INFO - __init__: GAN mode enabled. Training discriminator for 1 steps.
18:49:27 INFO - <module>: Model(
  (Encoder): Encoder(
    (pre_pad): ReflectionPad2d((3, 3, 3, 3))
    (asymmetric_pad): ReflectionPad2d((0, 1, 1, 0))
    (post_pad): ReflectionPad2d((1, 1, 1, 1))
    (conv_block1): Sequential(
      (0): ReflectionPad2d((3, 3, 3, 3))
      (1): Conv2d(3, 60, kernel_size=(7, 7), stride=(1, 1))
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block2): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(60, 120, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block3): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(120, 240, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block4): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(240, 480, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block5): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(480, 960, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block_out): Sequential(
      (0): ReflectionPad2d((1, 1, 1, 1))
      (1): Conv2d(960, 220, kernel_size=(3, 3), stride=(1, 1))
    )
  )
  (Generator): Generator(
    (pre_pad): ReflectionPad2d((1, 1, 1, 1))
    (asymmetric_pad): ReflectionPad2d((0, 1, 1, 0))
    (post_pad): ReflectionPad2d((3, 3, 3, 3))
    (conv_block_init): Sequential(
      (0): ChannelNorm2D()
      (1): ReflectionPad2d((1, 1, 1, 1))
      (2): Conv2d(220, 960, kernel_size=(3, 3), stride=(1, 1))
      (3): ChannelNorm2D()
    )
    (resblock_0): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_1): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_2): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_3): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_4): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_5): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_6): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_7): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_8): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (upconv_block1): Sequential(
      (0): ConvTranspose2d(960, 480, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (upconv_block2): Sequential(
      (0): ConvTranspose2d(480, 240, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (upconv_block3): Sequential(
      (0): ConvTranspose2d(240, 120, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (upconv_block4): Sequential(
      (0): ConvTranspose2d(120, 60, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (conv_block_out): Sequential(
      (0): ReflectionPad2d((3, 3, 3, 3))
      (1): Conv2d(60, 3, kernel_size=(7, 7), stride=(1, 1))
    )
  )
  (Hyperprior): Hyperprior(
    (analysis_net): HyperpriorAnalysis(
      (conv1): Conv2d(220, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (conv2): Conv2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), padding_mode=reflect)
      (conv3): Conv2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), padding_mode=reflect)
    )
    (synthesis_mu): HyperpriorSynthesis(
      (conv1): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv2): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv3): ConvTranspose2d(320, 220, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (synthesis_std): HyperpriorSynthesis(
      (conv1): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv2): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv3): ConvTranspose2d(320, 220, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (hyperlatent_likelihood): HyperpriorDensity()
  )
  (Discriminator): Discriminator(
    (context_conv): Conv2d(220, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    (context_upsample): Upsample(scale_factor=16.0, mode='nearest')
    (activation): LeakyReLU(negative_slope=0.2)
    (conv1): Conv2d(15, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
    (conv2): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
    (conv3): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
    (conv4): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
    (conv_out): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1))
  )
  (squared_difference): MSELoss()
  (perceptual_loss): PerceptualLoss()
)
18:49:27 INFO - <module>: ALL PARAMETERS
18:49:27 INFO - <module>: Encoder.conv_block1.1.weight - torch.Size([60, 3, 7, 7])
18:49:27 INFO - <module>: Encoder.conv_block1.1.bias - torch.Size([60])
18:49:27 INFO - <module>: Encoder.conv_block1.2.gamma - torch.Size([1, 60, 1, 1])
18:49:27 INFO - <module>: Encoder.conv_block1.2.beta - torch.Size([1, 60, 1, 1])
18:49:27 INFO - <module>: Encoder.conv_block2.1.weight - torch.Size([120, 60, 3, 3])
18:49:27 INFO - <module>: Encoder.conv_block2.1.bias - torch.Size([120])
18:49:27 INFO - <module>: Encoder.conv_block2.2.gamma - torch.Size([1, 120, 1, 1])
18:49:27 INFO - <module>: Encoder.conv_block2.2.beta - torch.Size([1, 120, 1, 1])
18:49:27 INFO - <module>: Encoder.conv_block3.1.weight - torch.Size([240, 120, 3, 3])
18:49:27 INFO - <module>: Encoder.conv_block3.1.bias - torch.Size([240])
18:49:27 INFO - <module>: Encoder.conv_block3.2.gamma - torch.Size([1, 240, 1, 1])
18:49:27 INFO - <module>: Encoder.conv_block3.2.beta - torch.Size([1, 240, 1, 1])
18:49:27 INFO - <module>: Encoder.conv_block4.1.weight - torch.Size([480, 240, 3, 3])
18:49:27 INFO - <module>: Encoder.conv_block4.1.bias - torch.Size([480])
18:49:27 INFO - <module>: Encoder.conv_block4.2.gamma - torch.Size([1, 480, 1, 1])
18:49:27 INFO - <module>: Encoder.conv_block4.2.beta - torch.Size([1, 480, 1, 1])
18:49:27 INFO - <module>: Encoder.conv_block5.1.weight - torch.Size([960, 480, 3, 3])
18:49:27 INFO - <module>: Encoder.conv_block5.1.bias - torch.Size([960])
18:49:27 INFO - <module>: Encoder.conv_block5.2.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Encoder.conv_block5.2.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Encoder.conv_block_out.1.weight - torch.Size([220, 960, 3, 3])
18:49:27 INFO - <module>: Encoder.conv_block_out.1.bias - torch.Size([220])
18:49:27 INFO - <module>: Generator.conv_block_init.0.gamma - torch.Size([1, 220, 1, 1])
18:49:27 INFO - <module>: Generator.conv_block_init.0.beta - torch.Size([1, 220, 1, 1])
18:49:27 INFO - <module>: Generator.conv_block_init.2.weight - torch.Size([960, 220, 3, 3])
18:49:27 INFO - <module>: Generator.conv_block_init.2.bias - torch.Size([960])
18:49:27 INFO - <module>: Generator.conv_block_init.3.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.conv_block_init.3.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_0.conv1.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: Generator.resblock_0.conv1.bias - torch.Size([960])
18:49:27 INFO - <module>: Generator.resblock_0.conv2.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: Generator.resblock_0.conv2.bias - torch.Size([960])
18:49:27 INFO - <module>: Generator.resblock_0.norm1.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_0.norm1.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_0.norm2.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_0.norm2.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_1.conv1.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: Generator.resblock_1.conv1.bias - torch.Size([960])
18:49:27 INFO - <module>: Generator.resblock_1.conv2.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: Generator.resblock_1.conv2.bias - torch.Size([960])
18:49:27 INFO - <module>: Generator.resblock_1.norm1.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_1.norm1.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_1.norm2.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_1.norm2.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_2.conv1.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: Generator.resblock_2.conv1.bias - torch.Size([960])
18:49:27 INFO - <module>: Generator.resblock_2.conv2.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: Generator.resblock_2.conv2.bias - torch.Size([960])
18:49:27 INFO - <module>: Generator.resblock_2.norm1.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_2.norm1.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_2.norm2.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_2.norm2.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_3.conv1.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: Generator.resblock_3.conv1.bias - torch.Size([960])
18:49:27 INFO - <module>: Generator.resblock_3.conv2.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: Generator.resblock_3.conv2.bias - torch.Size([960])
18:49:27 INFO - <module>: Generator.resblock_3.norm1.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_3.norm1.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_3.norm2.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_3.norm2.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_4.conv1.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: Generator.resblock_4.conv1.bias - torch.Size([960])
18:49:27 INFO - <module>: Generator.resblock_4.conv2.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: Generator.resblock_4.conv2.bias - torch.Size([960])
18:49:27 INFO - <module>: Generator.resblock_4.norm1.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_4.norm1.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_4.norm2.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_4.norm2.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_5.conv1.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: Generator.resblock_5.conv1.bias - torch.Size([960])
18:49:27 INFO - <module>: Generator.resblock_5.conv2.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: Generator.resblock_5.conv2.bias - torch.Size([960])
18:49:27 INFO - <module>: Generator.resblock_5.norm1.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_5.norm1.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_5.norm2.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_5.norm2.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_6.conv1.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: Generator.resblock_6.conv1.bias - torch.Size([960])
18:49:27 INFO - <module>: Generator.resblock_6.conv2.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: Generator.resblock_6.conv2.bias - torch.Size([960])
18:49:27 INFO - <module>: Generator.resblock_6.norm1.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_6.norm1.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_6.norm2.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_6.norm2.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_7.conv1.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: Generator.resblock_7.conv1.bias - torch.Size([960])
18:49:27 INFO - <module>: Generator.resblock_7.conv2.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: Generator.resblock_7.conv2.bias - torch.Size([960])
18:49:27 INFO - <module>: Generator.resblock_7.norm1.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_7.norm1.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_7.norm2.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_7.norm2.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_8.conv1.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: Generator.resblock_8.conv1.bias - torch.Size([960])
18:49:27 INFO - <module>: Generator.resblock_8.conv2.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: Generator.resblock_8.conv2.bias - torch.Size([960])
18:49:27 INFO - <module>: Generator.resblock_8.norm1.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_8.norm1.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_8.norm2.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_8.norm2.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.upconv_block1.0.weight - torch.Size([960, 480, 3, 3])
18:49:27 INFO - <module>: Generator.upconv_block1.0.bias - torch.Size([480])
18:49:27 INFO - <module>: Generator.upconv_block1.1.gamma - torch.Size([1, 480, 1, 1])
18:49:27 INFO - <module>: Generator.upconv_block1.1.beta - torch.Size([1, 480, 1, 1])
18:49:27 INFO - <module>: Generator.upconv_block2.0.weight - torch.Size([480, 240, 3, 3])
18:49:27 INFO - <module>: Generator.upconv_block2.0.bias - torch.Size([240])
18:49:27 INFO - <module>: Generator.upconv_block2.1.gamma - torch.Size([1, 240, 1, 1])
18:49:27 INFO - <module>: Generator.upconv_block2.1.beta - torch.Size([1, 240, 1, 1])
18:49:27 INFO - <module>: Generator.upconv_block3.0.weight - torch.Size([240, 120, 3, 3])
18:49:27 INFO - <module>: Generator.upconv_block3.0.bias - torch.Size([120])
18:49:27 INFO - <module>: Generator.upconv_block3.1.gamma - torch.Size([1, 120, 1, 1])
18:49:27 INFO - <module>: Generator.upconv_block3.1.beta - torch.Size([1, 120, 1, 1])
18:49:27 INFO - <module>: Generator.upconv_block4.0.weight - torch.Size([120, 60, 3, 3])
18:49:27 INFO - <module>: Generator.upconv_block4.0.bias - torch.Size([60])
18:49:27 INFO - <module>: Generator.upconv_block4.1.gamma - torch.Size([1, 60, 1, 1])
18:49:27 INFO - <module>: Generator.upconv_block4.1.beta - torch.Size([1, 60, 1, 1])
18:49:27 INFO - <module>: Generator.conv_block_out.1.weight - torch.Size([3, 60, 7, 7])
18:49:27 INFO - <module>: Generator.conv_block_out.1.bias - torch.Size([3])
18:49:27 INFO - <module>: Hyperprior.analysis_net.conv1.weight - torch.Size([320, 220, 3, 3])
18:49:27 INFO - <module>: Hyperprior.analysis_net.conv1.bias - torch.Size([320])
18:49:27 INFO - <module>: Hyperprior.analysis_net.conv2.weight - torch.Size([320, 320, 5, 5])
18:49:27 INFO - <module>: Hyperprior.analysis_net.conv2.bias - torch.Size([320])
18:49:27 INFO - <module>: Hyperprior.analysis_net.conv3.weight - torch.Size([320, 320, 5, 5])
18:49:27 INFO - <module>: Hyperprior.analysis_net.conv3.bias - torch.Size([320])
18:49:27 INFO - <module>: Hyperprior.synthesis_mu.conv1.weight - torch.Size([320, 320, 5, 5])
18:49:27 INFO - <module>: Hyperprior.synthesis_mu.conv1.bias - torch.Size([320])
18:49:27 INFO - <module>: Hyperprior.synthesis_mu.conv2.weight - torch.Size([320, 320, 5, 5])
18:49:27 INFO - <module>: Hyperprior.synthesis_mu.conv2.bias - torch.Size([320])
18:49:27 INFO - <module>: Hyperprior.synthesis_mu.conv3.weight - torch.Size([320, 220, 3, 3])
18:49:27 INFO - <module>: Hyperprior.synthesis_mu.conv3.bias - torch.Size([220])
18:49:27 INFO - <module>: Hyperprior.synthesis_std.conv1.weight - torch.Size([320, 320, 5, 5])
18:49:27 INFO - <module>: Hyperprior.synthesis_std.conv1.bias - torch.Size([320])
18:49:27 INFO - <module>: Hyperprior.synthesis_std.conv2.weight - torch.Size([320, 320, 5, 5])
18:49:27 INFO - <module>: Hyperprior.synthesis_std.conv2.bias - torch.Size([320])
18:49:27 INFO - <module>: Hyperprior.synthesis_std.conv3.weight - torch.Size([320, 220, 3, 3])
18:49:27 INFO - <module>: Hyperprior.synthesis_std.conv3.bias - torch.Size([220])
18:49:27 INFO - <module>: Hyperprior.hyperlatent_likelihood.H_0 - torch.Size([320, 3, 1])
18:49:27 INFO - <module>: Hyperprior.hyperlatent_likelihood.a_0 - torch.Size([320, 3, 1])
18:49:27 INFO - <module>: Hyperprior.hyperlatent_likelihood.b_0 - torch.Size([320, 3, 1])
18:49:27 INFO - <module>: Hyperprior.hyperlatent_likelihood.H_1 - torch.Size([320, 3, 3])
18:49:27 INFO - <module>: Hyperprior.hyperlatent_likelihood.a_1 - torch.Size([320, 3, 1])
18:49:27 INFO - <module>: Hyperprior.hyperlatent_likelihood.b_1 - torch.Size([320, 3, 1])
18:49:27 INFO - <module>: Hyperprior.hyperlatent_likelihood.H_2 - torch.Size([320, 3, 3])
18:49:27 INFO - <module>: Hyperprior.hyperlatent_likelihood.a_2 - torch.Size([320, 3, 1])
18:49:27 INFO - <module>: Hyperprior.hyperlatent_likelihood.b_2 - torch.Size([320, 3, 1])
18:49:27 INFO - <module>: Hyperprior.hyperlatent_likelihood.H_3 - torch.Size([320, 1, 3])
18:49:27 INFO - <module>: Hyperprior.hyperlatent_likelihood.a_3 - torch.Size([320, 1, 1])
18:49:27 INFO - <module>: Hyperprior.hyperlatent_likelihood.b_3 - torch.Size([320, 1, 1])
18:49:27 INFO - <module>: Discriminator.context_conv.weight - torch.Size([12, 220, 3, 3])
18:49:27 INFO - <module>: Discriminator.context_conv.bias - torch.Size([12])
18:49:27 INFO - <module>: Discriminator.conv1.bias - torch.Size([64])
18:49:27 INFO - <module>: Discriminator.conv1.weight_orig - torch.Size([64, 15, 4, 4])
18:49:27 INFO - <module>: Discriminator.conv2.bias - torch.Size([128])
18:49:27 INFO - <module>: Discriminator.conv2.weight_orig - torch.Size([128, 64, 4, 4])
18:49:27 INFO - <module>: Discriminator.conv3.bias - torch.Size([256])
18:49:27 INFO - <module>: Discriminator.conv3.weight_orig - torch.Size([256, 128, 4, 4])
18:49:27 INFO - <module>: Discriminator.conv4.bias - torch.Size([512])
18:49:27 INFO - <module>: Discriminator.conv4.weight_orig - torch.Size([512, 256, 4, 4])
18:49:27 INFO - <module>: Discriminator.conv_out.weight - torch.Size([1, 512, 1, 1])
18:49:27 INFO - <module>: Discriminator.conv_out.bias - torch.Size([1])
18:49:27 INFO - <module>: AMORTIZATION PARAMETERS
18:49:27 INFO - <module>: conv_block1.1.weight - torch.Size([60, 3, 7, 7])
18:49:27 INFO - <module>: conv_block1.1.bias - torch.Size([60])
18:49:27 INFO - <module>: conv_block1.2.gamma - torch.Size([1, 60, 1, 1])
18:49:27 INFO - <module>: conv_block1.2.beta - torch.Size([1, 60, 1, 1])
18:49:27 INFO - <module>: conv_block2.1.weight - torch.Size([120, 60, 3, 3])
18:49:27 INFO - <module>: conv_block2.1.bias - torch.Size([120])
18:49:27 INFO - <module>: conv_block2.2.gamma - torch.Size([1, 120, 1, 1])
18:49:27 INFO - <module>: conv_block2.2.beta - torch.Size([1, 120, 1, 1])
18:49:27 INFO - <module>: conv_block3.1.weight - torch.Size([240, 120, 3, 3])
18:49:27 INFO - <module>: conv_block3.1.bias - torch.Size([240])
18:49:27 INFO - <module>: conv_block3.2.gamma - torch.Size([1, 240, 1, 1])
18:49:27 INFO - <module>: conv_block3.2.beta - torch.Size([1, 240, 1, 1])
18:49:27 INFO - <module>: conv_block4.1.weight - torch.Size([480, 240, 3, 3])
18:49:27 INFO - <module>: conv_block4.1.bias - torch.Size([480])
18:49:27 INFO - <module>: conv_block4.2.gamma - torch.Size([1, 480, 1, 1])
18:49:27 INFO - <module>: conv_block4.2.beta - torch.Size([1, 480, 1, 1])
18:49:27 INFO - <module>: conv_block5.1.weight - torch.Size([960, 480, 3, 3])
18:49:27 INFO - <module>: conv_block5.1.bias - torch.Size([960])
18:49:27 INFO - <module>: conv_block5.2.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: conv_block5.2.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: conv_block_out.1.weight - torch.Size([220, 960, 3, 3])
18:49:27 INFO - <module>: conv_block_out.1.bias - torch.Size([220])
18:49:27 INFO - <module>: conv_block_init.0.gamma - torch.Size([1, 220, 1, 1])
18:49:27 INFO - <module>: conv_block_init.0.beta - torch.Size([1, 220, 1, 1])
18:49:27 INFO - <module>: conv_block_init.2.weight - torch.Size([960, 220, 3, 3])
18:49:27 INFO - <module>: conv_block_init.2.bias - torch.Size([960])
18:49:27 INFO - <module>: conv_block_init.3.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: conv_block_init.3.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: resblock_0.conv1.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: resblock_0.conv1.bias - torch.Size([960])
18:49:27 INFO - <module>: resblock_0.conv2.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: resblock_0.conv2.bias - torch.Size([960])
18:49:27 INFO - <module>: resblock_0.norm1.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: resblock_0.norm1.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: resblock_0.norm2.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: resblock_0.norm2.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: resblock_1.conv1.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: resblock_1.conv1.bias - torch.Size([960])
18:49:27 INFO - <module>: resblock_1.conv2.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: resblock_1.conv2.bias - torch.Size([960])
18:49:27 INFO - <module>: resblock_1.norm1.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: resblock_1.norm1.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: resblock_1.norm2.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: resblock_1.norm2.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: resblock_2.conv1.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: resblock_2.conv1.bias - torch.Size([960])
18:49:27 INFO - <module>: resblock_2.conv2.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: resblock_2.conv2.bias - torch.Size([960])
18:49:27 INFO - <module>: resblock_2.norm1.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: resblock_2.norm1.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: resblock_2.norm2.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: resblock_2.norm2.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: resblock_3.conv1.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: resblock_3.conv1.bias - torch.Size([960])
18:49:27 INFO - <module>: resblock_3.conv2.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: resblock_3.conv2.bias - torch.Size([960])
18:49:27 INFO - <module>: resblock_3.norm1.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: resblock_3.norm1.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: resblock_3.norm2.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: resblock_3.norm2.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: resblock_4.conv1.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: resblock_4.conv1.bias - torch.Size([960])
18:49:27 INFO - <module>: resblock_4.conv2.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: resblock_4.conv2.bias - torch.Size([960])
18:49:27 INFO - <module>: resblock_4.norm1.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: resblock_4.norm1.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: resblock_4.norm2.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: resblock_4.norm2.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: resblock_5.conv1.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: resblock_5.conv1.bias - torch.Size([960])
18:49:27 INFO - <module>: resblock_5.conv2.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: resblock_5.conv2.bias - torch.Size([960])
18:49:27 INFO - <module>: resblock_5.norm1.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: resblock_5.norm1.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: resblock_5.norm2.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: resblock_5.norm2.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: resblock_6.conv1.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: resblock_6.conv1.bias - torch.Size([960])
18:49:27 INFO - <module>: resblock_6.conv2.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: resblock_6.conv2.bias - torch.Size([960])
18:49:27 INFO - <module>: resblock_6.norm1.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: resblock_6.norm1.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: resblock_6.norm2.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: resblock_6.norm2.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: resblock_7.conv1.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: resblock_7.conv1.bias - torch.Size([960])
18:49:27 INFO - <module>: resblock_7.conv2.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: resblock_7.conv2.bias - torch.Size([960])
18:49:27 INFO - <module>: resblock_7.norm1.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: resblock_7.norm1.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: resblock_7.norm2.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: resblock_7.norm2.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: resblock_8.conv1.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: resblock_8.conv1.bias - torch.Size([960])
18:49:27 INFO - <module>: resblock_8.conv2.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: resblock_8.conv2.bias - torch.Size([960])
18:49:27 INFO - <module>: resblock_8.norm1.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: resblock_8.norm1.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: resblock_8.norm2.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: resblock_8.norm2.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: upconv_block1.0.weight - torch.Size([960, 480, 3, 3])
18:49:27 INFO - <module>: upconv_block1.0.bias - torch.Size([480])
18:49:27 INFO - <module>: upconv_block1.1.gamma - torch.Size([1, 480, 1, 1])
18:49:27 INFO - <module>: upconv_block1.1.beta - torch.Size([1, 480, 1, 1])
18:49:27 INFO - <module>: upconv_block2.0.weight - torch.Size([480, 240, 3, 3])
18:49:27 INFO - <module>: upconv_block2.0.bias - torch.Size([240])
18:49:27 INFO - <module>: upconv_block2.1.gamma - torch.Size([1, 240, 1, 1])
18:49:27 INFO - <module>: upconv_block2.1.beta - torch.Size([1, 240, 1, 1])
18:49:27 INFO - <module>: upconv_block3.0.weight - torch.Size([240, 120, 3, 3])
18:49:27 INFO - <module>: upconv_block3.0.bias - torch.Size([120])
18:49:27 INFO - <module>: upconv_block3.1.gamma - torch.Size([1, 120, 1, 1])
18:49:27 INFO - <module>: upconv_block3.1.beta - torch.Size([1, 120, 1, 1])
18:49:27 INFO - <module>: upconv_block4.0.weight - torch.Size([120, 60, 3, 3])
18:49:27 INFO - <module>: upconv_block4.0.bias - torch.Size([60])
18:49:27 INFO - <module>: upconv_block4.1.gamma - torch.Size([1, 60, 1, 1])
18:49:27 INFO - <module>: upconv_block4.1.beta - torch.Size([1, 60, 1, 1])
18:49:27 INFO - <module>: conv_block_out.1.weight - torch.Size([3, 60, 7, 7])
18:49:27 INFO - <module>: conv_block_out.1.bias - torch.Size([3])
18:49:27 INFO - <module>: conv1.weight - torch.Size([320, 220, 3, 3])
18:49:27 INFO - <module>: conv1.bias - torch.Size([320])
18:49:27 INFO - <module>: conv2.weight - torch.Size([320, 320, 5, 5])
18:49:27 INFO - <module>: conv2.bias - torch.Size([320])
18:49:27 INFO - <module>: conv3.weight - torch.Size([320, 320, 5, 5])
18:49:27 INFO - <module>: conv3.bias - torch.Size([320])
18:49:27 INFO - <module>: conv1.weight - torch.Size([320, 320, 5, 5])
18:49:27 INFO - <module>: conv1.bias - torch.Size([320])
18:49:27 INFO - <module>: conv2.weight - torch.Size([320, 320, 5, 5])
18:49:27 INFO - <module>: conv2.bias - torch.Size([320])
18:49:27 INFO - <module>: conv3.weight - torch.Size([320, 220, 3, 3])
18:49:27 INFO - <module>: conv3.bias - torch.Size([220])
18:49:27 INFO - <module>: conv1.weight - torch.Size([320, 320, 5, 5])
18:49:27 INFO - <module>: conv1.bias - torch.Size([320])
18:49:27 INFO - <module>: conv2.weight - torch.Size([320, 320, 5, 5])
18:49:27 INFO - <module>: conv2.bias - torch.Size([320])
18:49:27 INFO - <module>: conv3.weight - torch.Size([320, 220, 3, 3])
18:49:27 INFO - <module>: conv3.bias - torch.Size([220])
18:49:27 INFO - <module>: AMORTIZATION PARAMETERS
18:49:27 INFO - <module>: Encoder.conv_block1.1.weight - torch.Size([60, 3, 7, 7])
18:49:27 INFO - <module>: Encoder.conv_block1.1.bias - torch.Size([60])
18:49:27 INFO - <module>: Encoder.conv_block1.2.gamma - torch.Size([1, 60, 1, 1])
18:49:27 INFO - <module>: Encoder.conv_block1.2.beta - torch.Size([1, 60, 1, 1])
18:49:27 INFO - <module>: Encoder.conv_block2.1.weight - torch.Size([120, 60, 3, 3])
18:49:27 INFO - <module>: Encoder.conv_block2.1.bias - torch.Size([120])
18:49:27 INFO - <module>: Encoder.conv_block2.2.gamma - torch.Size([1, 120, 1, 1])
18:49:27 INFO - <module>: Encoder.conv_block2.2.beta - torch.Size([1, 120, 1, 1])
18:49:27 INFO - <module>: Encoder.conv_block3.1.weight - torch.Size([240, 120, 3, 3])
18:49:27 INFO - <module>: Encoder.conv_block3.1.bias - torch.Size([240])
18:49:27 INFO - <module>: Encoder.conv_block3.2.gamma - torch.Size([1, 240, 1, 1])
18:49:27 INFO - <module>: Encoder.conv_block3.2.beta - torch.Size([1, 240, 1, 1])
18:49:27 INFO - <module>: Encoder.conv_block4.1.weight - torch.Size([480, 240, 3, 3])
18:49:27 INFO - <module>: Encoder.conv_block4.1.bias - torch.Size([480])
18:49:27 INFO - <module>: Encoder.conv_block4.2.gamma - torch.Size([1, 480, 1, 1])
18:49:27 INFO - <module>: Encoder.conv_block4.2.beta - torch.Size([1, 480, 1, 1])
18:49:27 INFO - <module>: Encoder.conv_block5.1.weight - torch.Size([960, 480, 3, 3])
18:49:27 INFO - <module>: Encoder.conv_block5.1.bias - torch.Size([960])
18:49:27 INFO - <module>: Encoder.conv_block5.2.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Encoder.conv_block5.2.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Encoder.conv_block_out.1.weight - torch.Size([220, 960, 3, 3])
18:49:27 INFO - <module>: Encoder.conv_block_out.1.bias - torch.Size([220])
18:49:27 INFO - <module>: Generator.conv_block_init.0.gamma - torch.Size([1, 220, 1, 1])
18:49:27 INFO - <module>: Generator.conv_block_init.0.beta - torch.Size([1, 220, 1, 1])
18:49:27 INFO - <module>: Generator.conv_block_init.2.weight - torch.Size([960, 220, 3, 3])
18:49:27 INFO - <module>: Generator.conv_block_init.2.bias - torch.Size([960])
18:49:27 INFO - <module>: Generator.conv_block_init.3.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.conv_block_init.3.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_0.conv1.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: Generator.resblock_0.conv1.bias - torch.Size([960])
18:49:27 INFO - <module>: Generator.resblock_0.conv2.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: Generator.resblock_0.conv2.bias - torch.Size([960])
18:49:27 INFO - <module>: Generator.resblock_0.norm1.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_0.norm1.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_0.norm2.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_0.norm2.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_1.conv1.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: Generator.resblock_1.conv1.bias - torch.Size([960])
18:49:27 INFO - <module>: Generator.resblock_1.conv2.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: Generator.resblock_1.conv2.bias - torch.Size([960])
18:49:27 INFO - <module>: Generator.resblock_1.norm1.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_1.norm1.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_1.norm2.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_1.norm2.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_2.conv1.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: Generator.resblock_2.conv1.bias - torch.Size([960])
18:49:27 INFO - <module>: Generator.resblock_2.conv2.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: Generator.resblock_2.conv2.bias - torch.Size([960])
18:49:27 INFO - <module>: Generator.resblock_2.norm1.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_2.norm1.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_2.norm2.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_2.norm2.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_3.conv1.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: Generator.resblock_3.conv1.bias - torch.Size([960])
18:49:27 INFO - <module>: Generator.resblock_3.conv2.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: Generator.resblock_3.conv2.bias - torch.Size([960])
18:49:27 INFO - <module>: Generator.resblock_3.norm1.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_3.norm1.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_3.norm2.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_3.norm2.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_4.conv1.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: Generator.resblock_4.conv1.bias - torch.Size([960])
18:49:27 INFO - <module>: Generator.resblock_4.conv2.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: Generator.resblock_4.conv2.bias - torch.Size([960])
18:49:27 INFO - <module>: Generator.resblock_4.norm1.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_4.norm1.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_4.norm2.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_4.norm2.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_5.conv1.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: Generator.resblock_5.conv1.bias - torch.Size([960])
18:49:27 INFO - <module>: Generator.resblock_5.conv2.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: Generator.resblock_5.conv2.bias - torch.Size([960])
18:49:27 INFO - <module>: Generator.resblock_5.norm1.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_5.norm1.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_5.norm2.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_5.norm2.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_6.conv1.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: Generator.resblock_6.conv1.bias - torch.Size([960])
18:49:27 INFO - <module>: Generator.resblock_6.conv2.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: Generator.resblock_6.conv2.bias - torch.Size([960])
18:49:27 INFO - <module>: Generator.resblock_6.norm1.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_6.norm1.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_6.norm2.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_6.norm2.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_7.conv1.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: Generator.resblock_7.conv1.bias - torch.Size([960])
18:49:27 INFO - <module>: Generator.resblock_7.conv2.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: Generator.resblock_7.conv2.bias - torch.Size([960])
18:49:27 INFO - <module>: Generator.resblock_7.norm1.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_7.norm1.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_7.norm2.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_7.norm2.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_8.conv1.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: Generator.resblock_8.conv1.bias - torch.Size([960])
18:49:27 INFO - <module>: Generator.resblock_8.conv2.weight - torch.Size([960, 960, 3, 3])
18:49:27 INFO - <module>: Generator.resblock_8.conv2.bias - torch.Size([960])
18:49:27 INFO - <module>: Generator.resblock_8.norm1.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_8.norm1.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_8.norm2.gamma - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.resblock_8.norm2.beta - torch.Size([1, 960, 1, 1])
18:49:27 INFO - <module>: Generator.upconv_block1.0.weight - torch.Size([960, 480, 3, 3])
18:49:27 INFO - <module>: Generator.upconv_block1.0.bias - torch.Size([480])
18:49:27 INFO - <module>: Generator.upconv_block1.1.gamma - torch.Size([1, 480, 1, 1])
18:49:27 INFO - <module>: Generator.upconv_block1.1.beta - torch.Size([1, 480, 1, 1])
18:49:27 INFO - <module>: Generator.upconv_block2.0.weight - torch.Size([480, 240, 3, 3])
18:49:27 INFO - <module>: Generator.upconv_block2.0.bias - torch.Size([240])
18:49:27 INFO - <module>: Generator.upconv_block2.1.gamma - torch.Size([1, 240, 1, 1])
18:49:27 INFO - <module>: Generator.upconv_block2.1.beta - torch.Size([1, 240, 1, 1])
18:49:27 INFO - <module>: Generator.upconv_block3.0.weight - torch.Size([240, 120, 3, 3])
18:49:27 INFO - <module>: Generator.upconv_block3.0.bias - torch.Size([120])
18:49:27 INFO - <module>: Generator.upconv_block3.1.gamma - torch.Size([1, 120, 1, 1])
18:49:27 INFO - <module>: Generator.upconv_block3.1.beta - torch.Size([1, 120, 1, 1])
18:49:27 INFO - <module>: Generator.upconv_block4.0.weight - torch.Size([120, 60, 3, 3])
18:49:27 INFO - <module>: Generator.upconv_block4.0.bias - torch.Size([60])
18:49:27 INFO - <module>: Generator.upconv_block4.1.gamma - torch.Size([1, 60, 1, 1])
18:49:27 INFO - <module>: Generator.upconv_block4.1.beta - torch.Size([1, 60, 1, 1])
18:49:27 INFO - <module>: Generator.conv_block_out.1.weight - torch.Size([3, 60, 7, 7])
18:49:27 INFO - <module>: Generator.conv_block_out.1.bias - torch.Size([3])
18:49:27 INFO - <module>: Hyperprior.analysis_net.conv1.weight - torch.Size([320, 220, 3, 3])
18:49:27 INFO - <module>: Hyperprior.analysis_net.conv1.bias - torch.Size([320])
18:49:27 INFO - <module>: Hyperprior.analysis_net.conv2.weight - torch.Size([320, 320, 5, 5])
18:49:27 INFO - <module>: Hyperprior.analysis_net.conv2.bias - torch.Size([320])
18:49:27 INFO - <module>: Hyperprior.analysis_net.conv3.weight - torch.Size([320, 320, 5, 5])
18:49:27 INFO - <module>: Hyperprior.analysis_net.conv3.bias - torch.Size([320])
18:49:27 INFO - <module>: Hyperprior.synthesis_mu.conv1.weight - torch.Size([320, 320, 5, 5])
18:49:27 INFO - <module>: Hyperprior.synthesis_mu.conv1.bias - torch.Size([320])
18:49:27 INFO - <module>: Hyperprior.synthesis_mu.conv2.weight - torch.Size([320, 320, 5, 5])
18:49:27 INFO - <module>: Hyperprior.synthesis_mu.conv2.bias - torch.Size([320])
18:49:27 INFO - <module>: Hyperprior.synthesis_mu.conv3.weight - torch.Size([320, 220, 3, 3])
18:49:27 INFO - <module>: Hyperprior.synthesis_mu.conv3.bias - torch.Size([220])
18:49:27 INFO - <module>: Hyperprior.synthesis_std.conv1.weight - torch.Size([320, 320, 5, 5])
18:49:27 INFO - <module>: Hyperprior.synthesis_std.conv1.bias - torch.Size([320])
18:49:27 INFO - <module>: Hyperprior.synthesis_std.conv2.weight - torch.Size([320, 320, 5, 5])
18:49:27 INFO - <module>: Hyperprior.synthesis_std.conv2.bias - torch.Size([320])
18:49:27 INFO - <module>: Hyperprior.synthesis_std.conv3.weight - torch.Size([320, 220, 3, 3])
18:49:27 INFO - <module>: Hyperprior.synthesis_std.conv3.bias - torch.Size([220])
18:49:27 INFO - <module>: HYPERPRIOR PARAMETERS
18:49:27 INFO - <module>: H_0 - torch.Size([320, 3, 1])
18:49:27 INFO - <module>: a_0 - torch.Size([320, 3, 1])
18:49:27 INFO - <module>: b_0 - torch.Size([320, 3, 1])
18:49:27 INFO - <module>: H_1 - torch.Size([320, 3, 3])
18:49:27 INFO - <module>: a_1 - torch.Size([320, 3, 1])
18:49:27 INFO - <module>: b_1 - torch.Size([320, 3, 1])
18:49:27 INFO - <module>: H_2 - torch.Size([320, 3, 3])
18:49:27 INFO - <module>: a_2 - torch.Size([320, 3, 1])
18:49:27 INFO - <module>: b_2 - torch.Size([320, 3, 1])
18:49:27 INFO - <module>: H_3 - torch.Size([320, 1, 3])
18:49:27 INFO - <module>: a_3 - torch.Size([320, 1, 1])
18:49:27 INFO - <module>: b_3 - torch.Size([320, 1, 1])
18:49:27 INFO - <module>: DISCRIMINATOR PARAMETERS
18:49:27 INFO - <module>: context_conv.weight - torch.Size([12, 220, 3, 3])
18:49:27 INFO - <module>: context_conv.bias - torch.Size([12])
18:49:27 INFO - <module>: conv1.bias - torch.Size([64])
18:49:27 INFO - <module>: conv1.weight_orig - torch.Size([64, 15, 4, 4])
18:49:27 INFO - <module>: conv2.bias - torch.Size([128])
18:49:27 INFO - <module>: conv2.weight_orig - torch.Size([128, 64, 4, 4])
18:49:27 INFO - <module>: conv3.bias - torch.Size([256])
18:49:27 INFO - <module>: conv3.weight_orig - torch.Size([256, 128, 4, 4])
18:49:27 INFO - <module>: conv4.bias - torch.Size([512])
18:49:27 INFO - <module>: conv4.weight_orig - torch.Size([512, 256, 4, 4])
18:49:27 INFO - <module>: conv_out.weight - torch.Size([1, 512, 1, 1])
18:49:27 INFO - <module>: conv_out.bias - torch.Size([1])
18:49:27 INFO - <module>: Number of trainable parameters: 184268780
18:49:27 INFO - <module>: Estimated size: 737.07512 MB
18:49:27 INFO - <module>: Starting forward pass with input shape [10, 3, 256, 256]
18:49:31 INFO - <module>: Delta t 3.865s
